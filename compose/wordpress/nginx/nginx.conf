
# User which processes run under
user  nginx;

# A single process for doing all queries (This may reflect the N of CPUs)
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    # allows you to define the total amount of connections accepted by a single worker_process
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$http_host -- $remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    # Enable gzip compression at the http block level
    gzip  on;

    # Others parameters found here https://gist.github.com/magnetikonline/10450786
    gzip_static on;
    gzip_comp_level 2;
    gzip_disable "msie6";
    gzip_proxied any;
    gzip_types application/javascript application/json application/vnd.ms-fontobject application/x-font-ttf image/svg+xml text/css text/plain text/xml;
    gzip_vary on;

    #FastCGI cache path in memory for better performances
    #The "fastcgicachepath" directive specifies the location of the cache (/etc/nginx/cache), its size (100m), memory zone name
    #(fastcgicache), the subdirectory levels, the inactive` timer and a max size
    fastcgi_cache_path /var/run/nginx-cache levels=1:2 keys_zone=fastcgicache:10m inactive=10m max_size=64m;

    # The "fastcgicachekey" directive specifies how the the cache filenames will be hashed. Nginx encrypts an
    # accessed file with MD5 based on this directive.
    fastcgi_cache_key $scheme$request_method$host$request_uri;
    # note: can also use HTTP headers to form the cache key, e.g.
    #fastcgi_cache_key $scheme$request_method$host$request_uri$http_x_custom_header;

    # When enabled, only one request at a time will be allowed to populate a new cache element
    # identified according to the fastcgi_cache_key directive by passing a request to a FastCGI server.
    fastcgi_cache_lock on;
    fastcgi_cache_use_stale error timeout invalid_header updating http_500;

    # The "fastcgicachevalid" directive is used to specify the default cache lifetime if these headers
    # are missing. We can store in cache specific status codes. If only caching time is specified
    # then only 200, 301, and 302 responses are cached.
    fastcgi_cache_valid 5m;

    # Disables processing of certain response header fields from the FastCGI server.
    fastcgi_ignore_headers Cache-Control Expires Set-Cookie;

    # All virtual server configurations were here
    include /etc/nginx/conf.d/*.conf;

}
